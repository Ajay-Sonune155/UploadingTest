Task - 03
what is java collection framework?

The Java Collection Framework (JCF) is a set of interfaces and classes in the java.util package that provide efficient ways to store, manipulate, and retrieve data in Java. It offers a well-structured hierarchy that includes lists, sets, queues, and maps.

Advantages/benefits of Java Collection Framework
Efficiency – Provides efficient built-in data structures.
Flexibility – Allows dynamic resizing.
Reusability – Predefined APIs reduce code complexity.
Type Safety – Generics help prevent runtime errors.
Thread Safety – Some classes like Vector and Hashtable are synchronize


Lets discuss each of them one by one:

1. List Interface (Ordered, Allows Duplicates)
-- ArrayList<E> – Resizable array-based implementation (fast random access).
-- LinkedList<E> – Doubly linked list (fast insertions/deletions).
-- Vector<E> – Synchronized ArrayList.
-- Stack<E> – LIFO (Last In First Out) implementation.

2.  Set Interface (Unique Elements, Unordered)
-- HashSet<E> – No duplicate values, unordered.
-- LinkedHashSet<E> – Maintains insertion order.
-- TreeSet<E> – Stores unique elements in sorted order.

3. Queue Interface (FIFO Order)
-- PriorityQueue<E> – Elements are sorted based on priority.
-- ArrayDeque<E> – Fast Deque (double-ended queue) implementation.

4. Map Interface (Key-Value Pairs)
-- HashMap<K,V> – Unordered key-value pairs.
-- LinkedHashMap<K,V> – Maintains insertion order.
-- TreeMap<K,V> – Sorted map.


// Lets Implement all the Java Collection Framework in a program:
import java.util.*;
public class CollectionFrameworkExample {
    public static void main(String[] args) {
        // List Example
        List<String> list = new ArrayList<>(Arrays.asList("Java", "Python", "C++", "Java"));
        System.out.println("ArrayList: " + list);

        // Set Example
        Set<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3, 2, 4));
        System.out.println("HashSet: " + set);

        // Queue Example
        Queue<String> queue = new LinkedList<>(Arrays.asList("A", "B", "C"));
        System.out.println("Queue: " + queue);
        queue.poll();
        System.out.println("Queue after poll: " + queue);

        // Map Example
        Map<Integer, String> map = new HashMap<>();
        map.put(101, "kaLu");
        map.put(102, "MaLu");
        map.put(103, "BhaLu");
        System.out.println("HashMap: " + map);

        // Iterating over List
        System.out.println("Iterating List:");
        list.forEach(System.out::println);

        // Iterating over Map
        System.out.println("Iterating Map:");
        map.forEach((key, value) -> System.out.println(key + " -> " + value));
    }
}


OUTPUT:
ArrayList: [Java, Python, C++, Java]
HashSet: [1, 2, 3, 4]
Queue: [A, B, C]
Queue after poll: [B, C]
HashMap: {101=KaLu, 102=MaLu, 103=BhaLu}
Iterating List:
Java
Python
C++
Java
Iterating Map:
101 -> KaLu
102 -> MaLu
103 -> BhaLu




